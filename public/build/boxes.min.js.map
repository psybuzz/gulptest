{"version":3,"sources":["boxes.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"boxes.min.js","sourcesContent":["// Get the width and the height of the screen,\r\n// use them to set up the aspect ratio of the camera \r\n// and the size of the renderer.\r\nHEIGHT = window.innerHeight;\r\nWIDTH = window.innerWidth;\r\n\r\n// Create the scene\r\nscene = new THREE.Scene();\r\n\r\n// Add a fog effect to the scene; same color as the\r\n// background color used in the style sheet\r\n// scene.fog = new THREE.Fog(0xf7d9aa, 100, 950);\r\n\r\n// Create the camera\r\naspectRatio = WIDTH / HEIGHT;\r\nfieldOfView = 60;\r\nnearPlane = 1;\r\nfarPlane = 10000;\r\ncamera = new THREE.PerspectiveCamera(\r\n    fieldOfView,\r\n    aspectRatio,\r\n    nearPlane,\r\n    farPlane\r\n    );\r\n\r\n// Set the position of the camera\r\ncamera.position.x = 0;\r\ncamera.position.z = 128;\r\n// camera.position.y = 100;\r\n\r\n// Create the renderer\r\nrenderer = new THREE.WebGLRenderer({ \r\n    // Allow transparency to show the gradient background\r\n    // we defined in the CSS\r\n    alpha: true, \r\n\r\n    // Activate the anti-aliasing; this is less performant,\r\n    // but, as our project is low-poly based, it should be fine :)\r\n    antialias: true \r\n});\r\n\r\n// Define the size of the renderer; in this case,\r\n// it will fill the entire screen\r\nrenderer.setSize(WIDTH, HEIGHT);\r\n\r\n// Enable shadow rendering\r\nrenderer.shadowMapEnabled = true;\r\n\r\n// Add the DOM element of the renderer to the \r\n// container we created in the HTML\r\n$('.container').append(renderer.domElement);\r\n\r\n// Listen to the screen: if the user resizes it\r\n// we have to update the camera and the renderer size\r\n// window.addEventListener('resize', handleWindowResize, false);\r\n\r\nvar geometry = new THREE.BoxGeometry(1,1,1);\r\nvar material = new THREE.MeshBasicMaterial({color: 0x585751});\r\nvar cube = new THREE.Mesh(geometry, material);\r\nvar cube2 = new THREE.Mesh(geometry, material);\r\nvar cube3 = new THREE.Mesh(geometry, material);\r\n\r\ncube2.position.x = 3;\r\ncube3.position.x = -3;\r\n\r\nscene.add(cube);\r\nscene.add(cube2);\r\nscene.add(cube3);\r\n\r\nvar start = Date.now();\r\nvar speed = 8;\r\nfunction render () {\r\n    var dt = Date.now() - start;\r\n    \r\n    cube.scale.y += Math.pow(2, -dt*0.008)*speed;\r\n    cube2.scale.y += Math.pow(2, -dt*0.005)*speed;\r\n    cube3.scale.y += Math.pow(2, -dt*0.005)*speed;\r\n\r\n    // camera.position.y += 0.08*speed/2;\r\n    // camera.rotation.x = (Math.pow(3, -dt*0.01) - 0.5);\r\n    console.log(camera.rotation.x);\r\n    \r\n    renderer.render(scene, camera);\r\n    requestAnimationFrame(render);\r\n}\r\nrender();\r\n\r\nfunction jump () {\r\n    start = Date.now();\r\n    camera.rotation.x = 0;\r\n    camera.position.y = 0;\r\n    cube.scale.y = 1;\r\n    cube2.scale.y = 1;\r\n    cube3.scale.y = 1;\r\n}\r\ndocument.addEventListener(\"click\", jump);\r\ndocument.addEventListener(\"keydown\", jump);"],"sourceRoot":"/source/"}